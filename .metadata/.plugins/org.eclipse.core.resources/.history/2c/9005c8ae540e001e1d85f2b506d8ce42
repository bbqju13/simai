package com.myweb.www.contorller;


import java.util.List;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.myweb.www.domain.BoardDTO;
import com.myweb.www.domain.BoardVO;
import com.myweb.www.domain.FileVO;
import com.myweb.www.domain.MemberVO;
import com.myweb.www.domain.PagingVO;
import com.myweb.www.handler.FileHandler;
import com.myweb.www.handler.PagingHandler;
import com.myweb.www.repository.MemberDAO;
import com.myweb.www.service.BoardService;

import lombok.extern.slf4j.Slf4j;

@RequestMapping("/board/*")
@Slf4j
@Controller
public class BoardContorller {
	private static final Logger log = LoggerFactory.getLogger(BoardContorller.class);
	
	@Inject
	private BoardService bsv;
	
	@Inject
	private MemberDAO mdao;
	
	@Inject
	private FileHandler fhd;
	
	@GetMapping("/register")
	public String registerGet() {
		return "/board/register";
	}
	
	@PostMapping("/register")
//	required : 필수여부 > false 해당 파라미터가 없더라도 예외가 발생하지 않음.
	public String registerPost(BoardVO bvo, RedirectAttributes rAtt, @RequestParam(name="files", required = false)MultipartFile[] files) {
		log.info(" >>>>> bvo >>>>> : " + bvo.toString());
		log.info(" >>>>> files >>>>> : " + files.toString());
		List<FileVO> Flist = null;
//		file 처리 > handler로 빼기
		if(files[0].getSize()>0) { // getSize()>0 데이터가 있다 라는것을 의미.
			// 파일 배열을 경로설정, fvo set 다해서 리스트로 리턴.
			Flist = fhd.upList(files);
		}else {
			log.info(" >>>>> file null >>>>> : ");
		}
		// 파일과 board처리를 별도로 할것인지, 같이 (묶어 처리 => 일반적)
		
		BoardDTO bdto = new BoardDTO(bvo,Flist);
		int isOk = bsv.register(bdto);
		
		log.info(" >>>>> board register >>>>> : " + (isOk > 0 ? "성공" : "실패"));
		rAtt.addFlashAttribute("isOk", isOk);
		return "redirect:/board/list";
	}
	@GetMapping("/list")
	public String list(Model m, PagingVO pvo) {
		log.info(" >>>>> PageNo >>>>> : " + pvo);
		log.info(" >>>>> typed >>>>> : " + pvo.getType());		
		List<BoardVO> list = bsv.getList(pvo);
		m.addAttribute("list", list);
		log.info("list "+ list.size());
		int totalCnt = bsv.gettotalCnt(pvo);
		PagingHandler ph = new PagingHandler(pvo, totalCnt);
		log.info("토탈"+totalCnt);
		m.addAttribute("ph", ph);
		return "/board/list";
	}
	
	// detail을 가져와야 하는 케이스 : detail, modify
	@GetMapping({"/detail", "/modify"})
	public void detail(Model m, @RequestParam("bno")int bno, HttpServletRequest r) {
		log.info(" >>>>> bno >>>>> : " + bno);
		log.info(" >>>>> mapping >>>>> : " + r.getRequestURI());
		String mapping = r.getRequestURI();
//		BoardVO bvo = bsv.getDetail(bno);
		BoardDTO bdto = bsv.getDetailfile(bno);
		
		String path = mapping.substring(mapping.lastIndexOf("/")+1);
		log.info(" >>>>> path >>>>> : " + path);
		if(path.equals("detail")) {
			int isOk = bsv.readCount(bno);
		}
		
		m.addAttribute("boardDTO", bdto);
		
	}
	
	@PostMapping("/modify")
	public String update(RedirectAttributes rAtt, @RequestParam(name="files", required = false)MultipartFile[] files, BoardVO bvo) {
		log.info(" >>>>> files >>>>> : " + files.toString());
		log.info(" >>>>> bvo >>>>> : " + bvo.toString());
		MemberVO user = mdao.getUser(bvo.getWriter());
		List<FileVO>  flist = null;
		if(files[0].getSize()>0) {
			flist = fhd.upList(files);
		}
		BoardDTO bdto = new BoardDTO(bvo, flist);
		int isOk = bsv.modifyFile(bdto, user);
		log.info(" >>>>> modify >>>>> : " + (isOk > 0 ? "성공" : "실패"));
		rAtt.addAttribute("msg_modify", isOk > 0 ? "1" : "0");
		return "redirect:/board/list";
	}
	
	@GetMapping("/delete")
	public String delete(RedirectAttributes rAtt, @RequestParam("bno")int bno) {
		int isOk = bsv.delete(bno);
		log.info(" >>>>> bno >>>>> : " + bno);
		log.info(" >>>>> delete >>>>> : " + (isOk > 0 ? "성공" : "실패"));
		rAtt.addAttribute("isOk", isOk);
		return "redirect:/board/list";
	}
	
	@DeleteMapping(value = "/file/{uuid}", produces = {MediaType.TEXT_PLAIN_VALUE} )
	public ResponseEntity<String> removeFile(@PathVariable("uuid")String uuid){
		log.info(" >>>>> uuid >>>>> : "+uuid);
		return bsv.removeFile(uuid) > 0 ?
				new ResponseEntity<String>("1", HttpStatus.OK) : new ResponseEntity<String>("0", HttpStatus.INTERNAL_SERVER_ERROR);
	}
	
	
	@GetMapping("/search")
	public String search(Model m, @RequestParam("keyword")String keyword) {
		List<BoardVO> list = bsv.search(keyword);
		log.info(" >>>>> keyword >>>>> : "+keyword);
		m.addAttribute("searchList", list);
		return "/board/list";
	}
	
}