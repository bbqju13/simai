package com.myweb.www.service;

import java.util.List;

import javax.inject.Inject;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import com.myweb.www.domain.BoardDTO;
import com.myweb.www.domain.BoardVO;
import com.myweb.www.domain.FileVO;
import com.myweb.www.domain.MemberVO;
import com.myweb.www.domain.PagingVO;
import com.myweb.www.repository.BoardDAO;
import com.myweb.www.repository.FileDAO;

@Service
public class BoardServiceImpl implements BoardService {
	private static final Logger log = LoggerFactory.getLogger(BoardServiceImpl.class);

	@Inject
	private BoardDAO bdao;
	@Inject
	private FileDAO fdao;

	@Override
	public int register(MemberVO mvo) {
		// TODO Auto-generated method stub
		log.info(" >>>>> board register in >>>>> ");
		return bdao.insert(mvo);
	}

	@Override
	public List<BoardVO> getList() {
		// TODO Auto-generated method stub
		log.info(" >>>>> board list in >>>>> ");
		return bdao.getList();
	}

	@Override
	public BoardVO getDetail(int bno) {
		// TODO Auto-generated method stub
		log.info(" >>>>> board detail in >>>>> ");
		return bdao.getDetail(bno);
	}

	@Override
	public int readCount(int bno) {
		// TODO Auto-generated method stub
		log.info(" >>>>> board readCount in >>>>> ");
		return bdao.readCount(bno);
	}

	@Override
	public int modify(BoardDTO bdto, MemberVO user) {
		// TODO Auto-generated method stub
		log.info(" >>>>> board modify in >>>>> ");
		BoardVO tmpBoard = bdao.getDetail(bdto.getBvo().getBno());
		if (user == null || !user.getId().equals(tmpBoard.getWriter())) {

			return 0;
		}
		int isOk = bdao.updateBoard(bdto.getBvo());
		if (isOk > 0) {
			List<FileVO> originalFiles = fdao.getFileList(bdto.getBvo().getBno());
			List<FileVO> newFiles = bdto.getFlist();

			for (FileVO file : originalFiles) {
				boolean isDel = true;
				for (FileVO newFile : newFiles) {
					if (file.getBno() == newFile.getBno()) {
						isDel = false;
						break;
					}
				}
				if (isDel) {
					isOk *= fdao.deleteFile(file.getBno());
				}
			}
			for (FileVO newFile : newFiles) {
				boolean isNew = true;
				for (FileVO file : originalFiles) {
					if (file.getBno() == newFile.getBno()) {
						isNew = false;
						break;
					}
				}
				if (isNew) {
					newFile.setBno(bdto.getBvo().getBno());
					isOk *= fdao.insertFile(newFile);
				}
			}

		}
		return isOk;
	}

	@Override
	public int delete(int bno) {
		// TODO Auto-generated method stub
		log.info(" >>>>> board delete in >>>>> ");

		// Get the files associated with the post
		List<FileVO> files = fdao.getFileList(bno);

		// Delete each file
		for (FileVO file : files) {
			// File path
			Path filePath = Paths.get(file.getUploadPath(), file.getUuid(), file.getFileName());

			// Delete file or image and thumbnail
			try {
				Files.deleteIfExists(filePath);

				// If file is an image, delete the thumbnail as well
				if (file.isFileType()) {
					Files.deleteIfExists(Paths.get(file.getUploadPath(), "s_" + file.getUuid(), file.getFileName()));
				}
			} catch (IOException e) {
				log.error("Delete file error", e);
				return 0;
			}

			// Delete file information in the database
			if (fdao.deleteFile(file.getUuid()) == 0) {
				return 0;
			}
		}

		// Delete post in the database
		return bdao.delete(bno);
	}

	@Override
	public List<BoardVO> getList(PagingVO pvo) {
		// TODO Auto-generated method stub
		log.info(" >>>>> board PagingList in >>>>> ");
		return bdao.selectBoardListPaging(pvo);
	}

	@Override
	public int gettotalCnt(PagingVO pvo) {
		// TODO Auto-generated method stub
		log.info(" >>>>> board PagingList in >>>>> ");
		return bdao.getTotalCnt(pvo);
	}

	@Override
	public List<BoardVO> search(String keyword) {
		// TODO Auto-generated method stub
		log.info(" >>>>> board searchList in >>>>> ");
		return bdao.searchList(keyword);
	}

	@Override
	public int register(BoardDTO bdto) {
		// TODO Auto-generated method stub
		log.info(" >>>>> bvo+Flist in >>>>> ");
		int isOk = bdao.insert(bdto.getBvo());
		if (bdto.getFlist() == null) {
			isOk *= 1;
		} else {
			if (isOk > 0 && bdto.getFlist().size() > 0) {

				int bno = bdao.selectBno();

				for (FileVO fvo : bdto.getFlist()) {
					fvo.setBno(bno);
					log.info(" >>>>> insert File >>>>> : " + fvo.toString());
					isOk *= fdao.insertFile(fvo);
				}
			}
		}
		return isOk;
	}

	@Override
	public BoardDTO getDetailfile(int bno) {
		// TODO Auto-generated method stub
		log.info(" >>>>> detail file in >>>>> : ");
		BoardDTO bdto = new BoardDTO();
		bdto.setBvo(bdao.getDetail(bno));
		bdto.setFlist(fdao.getFileList(bno));
		return bdto;
	}

	@Override
	public int removeFile(String uuid) {
		// TODO Auto-generated method stub
		log.info(" >>>>> delete file in >>>>> : ");

		return fdao.deleteFile(uuid);
	}

	@Override
	public int modifyFile(BoardDTO bdto, UserVO user) {
		// TODO Auto-generated method stub
		log.info(" >>>>> board modifyfile in >>>>> ");
		BoardVO tmpBoard = bdao.getDetail(bdto.getBvo().getBno()); // 해당 글의 게시글 호출
		if (user == null || !user.getId().equals(tmpBoard.getWriter())) {

			return 0;
		}
		int isOk = bdao.updateBoard(bdto.getBvo());
		if (bdto.getFlist() == null) {
			isOk *= 1;
		} else {
			if (isOk > 0 && bdto.getFlist().size() > 0) {
				int bno = bdto.getBvo().getBno();
				for (FileVO fvo : bdto.getFlist()) {
					fvo.setBno(bno);
					log.info(" >>>>> insert File >>>>> : " + fvo.toString());
					isOk *= fdao.insertFile(fvo); // 추가한 파일 추가

					// 삭제는 별도
				}
			}
		}
		return isOk;
	}
}
