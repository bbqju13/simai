package com.myweb.www.service;

import java.util.List;

import javax.inject.Inject;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import com.myweb.www.domain.BoardDTO;
import com.myweb.www.domain.BoardVO;
import com.myweb.www.domain.FileVO;
import com.myweb.www.domain.PagingVO;
import com.myweb.www.domain.UserVO;
import com.myweb.www.repository.BoardDAO;
import com.myweb.www.repository.FileDAO;
@Slf4j
@Service
public class BoardServiceImpl implements BoardService {
	private static final Logger log = LoggerFactory.getLogger(BoardServiceImpl.class);
	
	@Inject
	private BoardDAO bdao;
	@Inject
	private FileDAO fdao;
	

	@Override
	public int register(BoardVO bvo) {
		// TODO Auto-generated method stub
		log.info(" >>>>> board register in >>>>> ");
		return bdao.insert(bvo);
	}

	

	@Override
	public List<BoardVO> getList() {
		// TODO Auto-generated method stub
		log.info(" >>>>> board list in >>>>> ");
		return bdao.getList();
	}



	@Override
	public BoardVO getDetail(int bno) {
		// TODO Auto-generated method stub
		log.info(" >>>>> board detail in >>>>> ");
		return bdao.getDetail(bno);
	}



	@Override
	public int readCount(int bno) {
		// TODO Auto-generated method stub
		log.info(" >>>>> board readCount in >>>>> ");
		return bdao.readCount(bno);
	}

	@Override
	public int modify(BoardDTO bdto, UserVO user) {
		// TODO Auto-generated method stub
		log.info(" >>>>> board modify in >>>>> ");
		BoardVO tmpBoard = bdao.getDetail(bdto.getBvo().getBno()); // 해당 글의 게시글 호출
		if(user == null || !user.getId().equals(tmpBoard.getWriter())) {
			
			return 0;
		}
		int isOk = bdao.updateBoard(bdto.getBvo());
		if(isOk > 0) {
			List<FileVO> originalFiles = fdao.getFileList(bdto.getBvo().getBno());
			List<FileVO> newFiles = bdto.getFlist();
			
			for(FileVO file : originalFiles) {
				boolean isDel = true;
				for(FileVO newFile : newFiles) {
					if(file.getBno() == newFile.getBno()) {
						isDel = false;
						break;
					}
				}
				if(isDel) {
					isOk *= fdao.deleteFile(file.getBno());
				}
			}
			for(FileVO newFile : newFiles) {
				boolean isNew = true;
				for(FileVO file : originalFiles) {
					if(file.getBno() == newFile.getBno()) {
						isNew = false;
						break;
					}
				}
				if(isNew) {
					newFile.setBno(bdto.getBvo().getBno());
					isOk *= fdao.insertFile(newFile);
				}
			}
			
		}
		return isOk;
	}
	
	@Override
	public int delete(int bno) {
		// TODO Auto-generated method stub
		log.info(" >>>>> board delete in >>>>> ");
		return bdao.delete(bno);
	}



	@Override
	public List<BoardVO> getList(PagingVO pvo) {
		// TODO Auto-generated method stub
		log.info(" >>>>> board PagingList in >>>>> ");
		return bdao.selectBoardListPaging(pvo);
	}



	@Override
	public int gettotalCnt(PagingVO pvo) {
		// TODO Auto-generated method stub
		log.info(" >>>>> board PagingList in >>>>> ");
		return bdao.getTotalCnt(pvo);
	}



	@Override
	public List<BoardVO> search(String keyword) {
		// TODO Auto-generated method stub
		log.info(" >>>>> board searchList in >>>>> ");
		return bdao.searchList(keyword);
	}


// 파일 처리 라인
	@Override
	public int register(BoardDTO bdto) {
		// TODO Auto-generated method stub
		log.info(" >>>>> bvo+Flist in >>>>> ");
//		기존 게기슬에 대한 내용 DB 저장 내용 호출
		int isOk = bdao.insert(bdto.getBvo());
		if(bdto.getFlist() == null) { // 파일이 없다를 의미
			isOk*= 1; // 값이 없기때문에 성공 한걸로 침.
		}else {
			// bvo가 DB에 들어가고, 파일 개수가 있다면
			if(isOk>0 && bdto.getFlist().size()>0) {
				// register는 등록시 bno가 결정되어있지 않음.
//				int bno = bdto.getBvo().getBno(); 이건 update때 가능.
				int bno = bdao.selectBno(); // 방금 저장된 bvo 의 bno리턴받기
				
				// Flist의 모든 file의  bno를 방금받은 bno로 set
				for(FileVO fvo : bdto.getFlist()) {
					fvo.setBno(bno);
					log.info(" >>>>> insert File >>>>> : "+fvo.toString());
					isOk *= fdao.insertFile(fvo);
				}
			}
		}
		return isOk;
	}



	@Override
	public BoardDTO getDetailfile(int bno) {
		// TODO Auto-generated method stub
		log.info(" >>>>> detail file in >>>>> : ");
		BoardDTO bdto = new BoardDTO();
		bdto.setBvo(bdao.getDetail(bno)); // bvo 호출 앞에 detail에 있던거 호출 
		bdto.setFlist(fdao.getFileList(bno)); // filelist 호출
		return bdto;
	}



	@Override
	public int removeFile(String uuid) {
		// TODO Auto-generated method stub
		log.info(" >>>>> delete file in >>>>> : ");
		
		return fdao.deleteFile(uuid);
	}



	@Override
	public int modifyFile(BoardDTO bdto, UserVO user) {
		// TODO Auto-generated method stub
		log.info(" >>>>> board modifyfile in >>>>> ");
		BoardVO tmpBoard = bdao.getDetail(bdto.getBvo().getBno()); // 해당 글의 게시글 호출
		if(user == null || !user.getId().equals(tmpBoard.getWriter())) {
			
			
		return 0;
	}
		int isOk = bdao.updateBoard(bdto.getBvo());
		if(bdto.getFlist() == null) {
			isOk *= 1;
		}else {
			if(isOk>0 && bdto.getFlist().size()>0) {
				int bno = bdto.getBvo().getBno();
				for(FileVO fvo : bdto.getFlist()) {
					fvo.setBno(bno);
					log.info(" >>>>> insert File >>>>> : "+fvo.toString());
					isOk *= fdao.insertFile(fvo); // 추가한 파일 추가
					
					// 삭제는 별도
				}
			}
		}
		return isOk;
	}
}