package com.myweb.www.contorller;

import java.util.List;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;

import org.apache.tika.mime.MediaType;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.myweb.www.domain.BoardDTO;
import com.myweb.www.domain.BoardVO;
import com.myweb.www.domain.FileVO;
import com.myweb.www.domain.MemberVO;
import com.myweb.www.domain.PagingVO;
import com.myweb.www.handler.FileHandler;
import com.myweb.www.handler.PagingHandler;
import com.myweb.www.repository.MemberDAO;
import com.myweb.www.service.BoardService;

@RequestMapping("/board/*")
@Controller
public class BoardContorller {
	private static final Logger log = LoggerFactory.getLogger(BoardContorller.class);

	@Inject
	private BoardService bsv;

	@Inject
	private MemberDAO mdao;

	private FileHandler fh;

	@GetMapping("/register")
	public String registerGet() {
		return "/board/register";
	}

	@PostMapping("/register")
	public String registerPost(BoardVO bvo, RedirectAttributes Ratt,
			@RequestParam(name = "file", required = false) MultipartFile[] files) {
		log.info(" >>>>> BNO >>>>> : " + bvo.toString());
		log.info(" >>>>> FILES >>>>> : " + files.toString());
		List<FileVO> list = null;
		if (files[0].getSize() > 0) {
			list = fh.upList(files);
		} else {
			log.info(" >>>>> 파일없음 >>>>> : ");
		}
		BoardDTO bdto = new BoardDTO(bvo, list);
		int isOk = bsv.register(bdto);
		log.info(" >>>>> register >>>>> : " + (isOk > 0 ? "성공" : "실패"));
		Ratt.addFlashAttribute("isOk", isOk);
		return "redirect:/board/list";
	}

	@GetMapping("/list")
	public String list(Model m, PagingVO pvo) {
		log.info(" >>>>> PAGENO >>>>> : " + pvo);
		log.info(" >>>>> TYPED >>>>> : " + pvo.getType());
		List<BoardVO> list = bsv.getList(pvo);
		m.addAttribute("list", list);
		log.info(" >>>>> LISTSIZE >>>>> : " + list.size());

		int totalCnt = bsv.gettotalCnt(pvo);
		PagingHandler ph = new PagingHandler(pvo, totalCnt);
		log.info(" >>>>> TOTAL >>>>> : " + totalCnt);
		m.addAttribute("ph", ph);
		return "/board/list";
	}

	@GetMapping({ "/detail", "/modify" })
	public void detail(Model m, @RequestParam("bno") int bno, HttpServletRequest hr) {
		log.info(" >>>>> BNO >>>>> : " + bno);
		log.info(" >>>>> MAPPING >>>>> : " + hr.getRequestURI());
		String map = hr.getRequestURI();
		BoardDTO bdto = bsv.getDetailfile(bno);

		String path = map.substring(map.lastIndexOf("/") + 1);
		log.info(" >>>>> PATH >>>>> : " + path);
		if (path.equals("detail")) {
			int isOk = bsv.readCnt(bno);
		}
		m.addAttribute("BoardDTO", bdto);
	}

	@PostMapping("/modify")
	public String update(RedirectAttributes Ratt, @RequestParam(name = "files", required = false) MultipartFile[] files,
			BoardVO bvo) {
		log.info(" >>>>> FILES >>>>> : " + files.toString());
		log.info(" >>>>> BVO >>>>> : " + bvo.toString());
		MemberVO Muser = mdao.getUser(bvo.getWriter());
		List<FileVO> list = null;
		if (files[0].getSize() > 0) {
			list = fh.upList(files);
		}
		BoardDTO bdto = new BoardDTO(bvo, list);
		int isOk = bsv.modifyFile(bdto, Muser);
		log.info(" >>>>> MODIFY >>>>> : " + (isOk > 0 ? "성공" : "실패"));
		Ratt.addAttribute("msg_modify", isOk > 0 ? "1" : "0");
		return "redirect:/board/list";
	}

	@GetMapping("/delete")
	public String delete(RedirectAttributes Ratt, @RequestParam("bno") int bno) {
		int isOk = bsv.delete(bno);
		log.info(" >>>>> DELETE BNO >>>>> : " + bno);
		log.info(" >>>>> DELETE >>>>> : " + (isOk > 0 ? "성공" : "실패"));
		Ratt.addAttribute("isOk", isOk);
		return "redirect:/board/list";
	}

	@DeleteMapping(value = "/file/{uuid}", produces = { MediaType.TEXT_PLAIN_VALUE })
	public ResponseEntity<String> removeFile(@PathVariable("uuid") String uuid) {
		log.info(" >>>>> uuid >>>>> : " + uuid);
		return bsv.removeFile(uuid) > 0 ? new ResponseEntity<String>("1", HttpStatus.OK)
				: new ResponseEntity<String>("0", HttpStatus.INTERNAL_SERVER_ERROR);
	}
}
