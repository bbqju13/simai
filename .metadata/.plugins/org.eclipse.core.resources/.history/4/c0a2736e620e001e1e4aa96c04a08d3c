package com.myweb.www.service;

import java.util.List;

import javax.inject.Inject;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import com.myweb.www.domain.BoardDTO;
import com.myweb.www.domain.BoardVO;
import com.myweb.www.domain.FileVO;
import com.myweb.www.domain.MemberVO;
import com.myweb.www.domain.PagingVO;
import com.myweb.www.repository.BoardDAO;
import com.myweb.www.repository.FileDAO;

@Service
public class BoardServiceImpl implements BoardService {
	private static final Logger log = LoggerFactory.getLogger(BoardServiceImpl.class);

	@Inject
	private BoardDAO bdao;
	@Inject
	private FileDAO fdao;

	@Override
	public int register(MemberVO mvo) {
		// TODO Auto-generated method stub
		log.info(" >>>>> board register in >>>>> ");
		return bdao.insert(mvo);
	}

	@Override
	public List<BoardVO> getList() {
		// TODO Auto-generated method stub
		log.info(" >>>>> board list in >>>>> ");
		return bdao.getList();
	}

	@Override
	public BoardVO getDetail(int bno) {
		// TODO Auto-generated method stub
		log.info(" >>>>> board detail in >>>>> ");
		return bdao.getDetail(bno);
	}

	@Override
	public int readCount(int bno) {
		// TODO Auto-generated method stub
		log.info(" >>>>> board readCount in >>>>> ");
		return bdao.readCount(bno);
	}

	@Override
	public int modify(BoardDTO bdto, MemberVO user) {
		// TODO Auto-generated method stub
		log.info(" >>>>> board modify in >>>>> ");
		BoardVO tmpBoard = bdao.getDetail(bdto.getBvo().getBno());
		if (user == null || !user.getId().equals(tmpBoard.getWriter())) {

			return 0;
		}
		int isOk = bdao.updateBoard(bdto.getBvo());
		if (isOk > 0) {
			List<FileVO> originalFiles = fdao.getFileList(bdto.getBvo().getBno());
			List<FileVO> newFiles = bdto.getFlist();

			for (FileVO file : originalFiles) {
				boolean isDel = true;
				for (FileVO newFile : newFiles) {
					if (file.getBno() == newFile.getBno()) {
						isDel = false;
						break;
					}
				}
				if (isDel) {
					isOk *= fdao.deleteFile(file.getBno());
				}
			}
			for (FileVO newFile : newFiles) {
				boolean isNew = true;
				for (FileVO file : originalFiles) {
					if (file.getBno() == newFile.getBno()) {
						isNew = false;
						break;
					}
				}
				if (isNew) {
					newFile.setBno(bdto.getBvo().getBno());
					isOk *= fdao.insertFile(newFile);
				}
			}

		}
		return isOk;
	}

	@Override
	public int delete(int bno) {
		// TODO Auto-generated method stub
		log.info(" >>>>> board delete in >>>>> ");
		return bdao.delete(bno);
	}

	@Override
	public List<BoardVO> getList(PagingVO pvo) {
		// TODO Auto-generated method stub
		log.info(" >>>>> board PagingList in >>>>> ");
		return bdao.selectBoardListPaging(pvo);
	}

	@Override
	public int gettotalCnt(PagingVO pvo) {
		// TODO Auto-generated method stub
		log.info(" >>>>> board PagingList in >>>>> ");
		return bdao.getTotalCnt(pvo);
	}

	@Override
	public List<BoardVO> search(String keyword) {
		// TODO Auto-generated method stub
		log.info(" >>>>> board searchList in >>>>> ");
		return bdao.searchList(keyword);
	}

	@Override
	public int register(BoardDTO bdto) {
		// TODO Auto-generated method stub
		log.info(" >>>>> bvo+Flist in >>>>> ");
		int isOk = bdao.insert(bdto.getBvo());
		if (bdto.getFlist() == null) {
			isOk *= 1;
		} else {
			if (isOk > 0 && bdto.getFlist().size() > 0) {

				int bno = bdao.selectBno();

				for (FileVO fvo : bdto.getFlist()) {
					fvo.setBno(bno);
					log.info(" >>>>> insert File >>>>> : " + fvo.toString());
					isOk *= fdao.insertFile(fvo);
				}
			}
		}
		return isOk;
	}

	@Override
	public BoardDTO getDetailfile(int bno) {
		// TODO Auto-generated method stub
		log.info(" >>>>> detail file in >>>>> : ");
		BoardDTO bdto = new BoardDTO();
		bdto.setBvo(bdao.getDetail(bno));
		bdto.setFlist(fdao.getFileList(bno));
		return bdto;
	}

	@Override
	public int removeFile(String uuid) {
		// TODO Auto-generated method stub
		log.info(" >>>>> delete file in >>>>> : ");

		return fdao.deleteFile(uuid);
	}

	BoardDTO bdto, MemberVO user)
	{
		log.info(" >>>>> board modifyfile in >>>>> ");
		BoardVO tmpBoard = bdao.getDetail(bdto.getBvo().getBno());
		if (user == null || !user.getId().equals(tmpBoard.getWriter())) {
			return 0;
		}
		int isOk = bdao.updateBoard(bdto.getBvo());

		if (bdto.getFlist() != null) {
			if (isOk > 0 && bdto.getFlist().size() > 0) {
				int bno = bdto.getBvo().getBno();

				List<FileVO> originalFiles = fdao.getFileList(bno);

				// 기존 파일들에 대하여
				for (FileVO file : originalFiles) {
					boolean isDel = true;
					// 새 파일 목록에 존재하는지 확인
					for (FileVO fvo : bdto.getFlist()) {
						if (file.getUuid().equals(fvo.getUuid())) {
							isDel = false;
							break;
						}
					}
					// 새 파일 목록에 없다면 DB 및 물리적인 경로에서 삭제
					if (isDel) {
						isOk *= fdao.deleteFile(file.getUuid());

						// 파일 시스템에서의 실제 파일 삭제
						try {
							Path filePath = Paths.get(file.getUploadPath(), file.getUuid() + "_" + file.getFileName());
							Files.deleteIfExists(filePath);

							// 이미지 파일의 경우 썸네일도 삭제
							if (file.isFileType()) {
								Path thumbNail = Paths.get(file.getUploadPath(),
										"s_" + file.getUuid() + "_" + file.getFileName());
								Files.deleteIfExists(thumbNail);
							}
						} catch (Exception e) {
							log.error("delete file error", e);
						}
					}
				}

				// 새 파일이 존재하는지 확인 후 추가
				for (FileVO fvo : bdto.getFlist()) {
					boolean isNew = true;
					for (FileVO file : originalFiles) {
						if (file.getUuid().equals(fvo.getUuid())) {
							isNew = false;
							break;
						}
					}
					if (isNew) {
						fvo.setBno(bno);
						log.info(" >>>>> insert File >>>>> : " + fvo.toString());
						isOk *= fdao.insertFile(fvo);
					}
				}
			}
			return isOk;
		}

	}
}
